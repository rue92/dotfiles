(setq custom-file "~/.emacs.d/customizations.el")
(ignore-errors (load custom-file))

(setq user-full-name "Andrew Shugarts")
;; Template according to system in chezmoi
(setq user-mail-address {{ .email | quote }})

(require 'package)

;; Internet repositories for new packages.
(setq package-archives '(("gnu"    . "http://elpa.gnu.org/packages/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ("melpa"  . "http://melpa.org/packages/")))

;; Update local list of available packages:
;; Get descriptions of all configured ELPA packages,
;; and make them available for download.
(package-refresh-contents)

(unless (package-installed-p 'use-package)
  (package-install 'use-package))
(require 'use-package)

(setq use-package-always-ensure t)

(use-package auto-package-update
  :config
  ;; Delete residual old versions
  (setq auto-package-update-delete-old-versions t)
  ;; Do not bother me when updates have taken place.
  (setq auto-package-update-hide-results t)
  ;; Update installed packages at startup if there is an update pending.
  (auto-package-update-maybe))

;; Beautify my setup
(use-package starlit-theme
  :init
  (load-theme 'starlit))
(use-package nord-theme
  :disabled
  :init
  (load-theme 'nord)
  ;; All of this is to avoid problems that occur running Emacs as a daemon
  (defvar my:theme 'nord)
  (defvar my:theme-window-loaded nil)
  (defvar my:theme-terminal-loaded nil)

  (if (daemonp)
      (add-hook 'after-make-frame-functions (lambda (frame)
                                             (select-frame frame)
                                             (if (window-system frame)
                                                 (unless my:theme-window-loaded
                                                   (if my:theme-terminal-loaded
                                                       (enable-theme my:theme)
                                                     (load-theme my:theme t))
                                                   (setq my:theme-window-loaded t)
                                                   )
                                               (unless my:theme-terminal-loaded
                                                 (if my:theme-window-loaded
                                                     (enable-theme my:theme)
                                                   (load-theme my:theme t))
                                                 (setq my:theme-terminal-loaded t)
                                                 )
                                               )))

    (progn
      (load-theme my:theme t)
      (if (display-graphic-p)
          (setq my:theme-window-loaded t)
        (setq my:theme-terminal-loaded t)))))

;; Disable the startup screen because I'm okay without the help now
(setq inhibit-startup-screen t)

(use-package emacs
  :init
  (global-visual-line-mode 1)
  (tool-bar-mode -1)
  (recentf-mode 1)
  (set-frame-parameter (selected-frame) 'alpha '(96 75))
  (add-to-list 'default-frame-alist '(alpha . (96 . 75)))
  (setq ring-bell-function 'ignore)
  (defalias 'yes-or-no-p 'y-or-n-p)
  (setq backup-directory-alist '(("." . "~/.emacs.d/backup"))
	backup-by-copying t    ; Don't delink hardlinks
	version-control t      ; Use version numbers on backups
	delete-old-versions t  ; Automatically delete excess backups
	kept-new-versions 20   ; how many of the newest versions to keep
	kept-old-versions 5)   ; and how many of the old
  (remove-hook 'after-init-hook #'debian-ispell-set-startup-menu)
  (setq-default indent-tabs-mode nil)
  (defun ars/text-scale-reset ()
    (interactive)
    (text-scale-set 0))
  (defun bury-compile-buffer-if-successful (buffer string)
    "Bury a compilation buffer if succeeded without warnings "
    (when (and
           (buffer-live-p buffer)
           (string-match "compilation" (buffer-name buffer))
           (string-match "finished" string)
           (not
            (with-current-buffer buffer
              (goto-char (point-min))
              (search-forward "warning" nil t))))
      (run-with-timer 1 nil
                      (lambda (buf)
                        (bury-buffer buf)
                        (switch-to-prev-buffer (get-buffer-window buf) 'kill))
                      buffer)))
  (add-hook 'compilation-finish-functions 'bury-compile-buffer-if-successful)
  :delight
  (visual-line-mode)
  (global-visual-line-mode)
  :bind
  (("s-+" . text-scale-increase)
   ("s--" . text-scale-decrease)
   ("s-0" . ars/text-scale-reset)))

;; Actually a built-in, but it's nice to be able to actually keep it separate
(use-package recentf
  :init
  (recentf-mode)
  (run-at-time nil 300 'recentf-save-list)
  :bind
  (("C-c TAB" . recentf)))

;; This convenience packages is basically a super-charged other-window (C-x b)
(use-package ace-window
  :init
  (global-set-key (kbd "M-o") 'ace-window))

(use-package beacon
  :init
  (beacon-mode 1))

;; Make sure we have chezmoi-mode available since we manage all of our dotfiles with it
(use-package chezmoi
  :bind (("C-c C-\\" . chezmoi-find))
  :config
  (setq chezmoi-command (expand-file-name "~/bin/chezmoi")))

(use-package company
  :init
  (use-package slime-company)
  (setq company-backends '(company-capf
                         company-keywords
                         company-semantic
                         company-files
                         ;; company-etags
                         company-elisp
                         company-clang
                         company-slime
                         ;; company-irony-c-headers
                         ;; company-irony
                         ;; company-jedi
                         company-cmake
                         company-ispell
                         company-yasnippet))
  (global-company-mode)
  :bind
  ("C-." . company-complete))
(use-package company-posframe
  :init
  (company-posframe-mode 1))

(use-package delight)

(use-package doct
  :ensure t
  :commands (doct)
  :init
  (require 'org-capture))

(use-package dtrt-indent
  :init
  (dtrt-indent-global-mode)
  :delight)

(use-package eat)

(use-package counsel
  :after ivy
  :config (counsel-mode))

(use-package ivy
  :defer 0.1
  :diminish
  :bind (("C-c C-r" . ivy-resume)
         ("C-x B" . ivy-switch-buffer-other-window))
  :custom
  (ivy-count-format "(%d/%d) ")
  (ivy-use-virtual-buffers t)
  :config (ivy-mode))

(use-package ivy-rich
  :after ivy
  :custom
  (ivy-virtual-abbreviate 'full
                          ivy-rich-switch-buffer-align-virtual-buffer t
                          ivy-rich-path-style 'abbrev))

(use-package counsel-projectile
  :init
  (counsel-projectile-mode))

(use-package swiper
  :after ivy
  :bind (("C-s" . swiper)
         ("C-r" . swiper)))

(use-package helm
  :disabled
  :config
  (require 'helm-config)
  (setq completion-styles '(flex))
  
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z


  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
        helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
        helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
        helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
        helm-ff-file-name-history-use-recentf t
        helm-echo-input-in-header-line t)
  
  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 20)
  (helm-autoresize-mode 1)

  ;; Key bindings
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "M-y") 'helm-show-kill-ring)
  (global-set-key (kbd "C-x b") 'helm-mini)
  (global-set-key (kbd "C-x C-f") 'helm-find-files)

  (helm-mode 1))
(use-package helm-company
  :disabled
  :ensure t
  :after (helm company)
  :bind (("C-c C-;" . helm-company))
  :commands (helm-company)
  :init
  (define-key company-mode-map (kbd "C-;") 'helm-company)
  (define-key company-active-map (kbd "C-;") 'helm-company))

(use-package ivy
  :config
  (setq ivy-use-virtual-buffers t
        ivy-count-format "%d/%d "))
(use-package ivy-posframe)
(use-package counsel
  :bind
  (("M-x" . counsel-M-x)
   ("C-x C-f" . counsel-find-file)))


;; Magit is definitely a super power package of Emacs and I couldn't live without it
(use-package magit)

;; Can't avoid the power of an LSP when working with a lot of programming languages now
(use-package lsp-mode
  :init
  (setq lsp-keymap-prefix "C-c l")
  :hook
  (lsp-mode . lsp-enable-which-key-integration)
  :commands lsp)

(use-package lsp-ui :commands lsp-ui-mode)
(use-package helm-lsp :commands helm-lsp-workspace-symbol)

(use-package olivetti)

(use-package projectile
  :init
  (projectile-mode +1)
  :bind (:map projectile-mode-map
              ("s-p" . projectile-command-map)
              ("C-c p" . projectile-command-map))
  :delight '(:eval (concat " " (projectile-project-name))))

(use-package rainbow-blocks
  :init  
  (global-rainbow-blocks-mode)
  :delight)
(use-package rainbow-delimiters
  :hook
  (prog-mode . rainbow-delimiters-mode)
  :delight)

(use-package org
  :hook
  (org-mode . flyspell-mode)
  ;; Shit to make org-mode output pretty listings in PDFs
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-listings 'minted)

  (setq org-latex-pdf-process
        '("latexmk -shell-escape -interaction=nonstopmode -output-directory=%o %f"))

  (setq org-src-fontify-natively t)

  (org-babel-do-load-languages
   'org-babel-load-languages
   '((powershell . t)
     (shell . t)
     (latex . t)))
  (defun ars/org-confirm-babel-evaluate (lang body)
    (not (string= lang "emacs-lisp")))  ;don't ask for emacs-lisp
  (setq org-confirm-babel-evaluate #'ars/org-confirm-babel-evaluate))
(use-package org-bullets
  :after org
  :hook
  (org-mode . org-bullets-mode))

(use-package slime
  :custom
  ((inferior-lisp-program "sbcl")))
(use-package slime-company
  :after (slime company)
  :config (setq slime-company-completion 'fuzzy
                slime-company-after-completion 'slime-company-just-one-space))

(use-package undo-tree
  :defer 5
  :init
  (global-undo-tree-mode 1)
  (setq undo-tree-history-directory-alist '(("." . "~/.emacs.d/undo")))
  :delight
  (global-undo-tree-mode)
  (undo-tree-mode))

;; Making it easier to discover Emacs key presses.
(use-package which-key
  :delight (which-key-mode)
  :config (which-key-mode)
          (which-key-setup-side-window-bottom)
          (setq which-key-idle-delay 0.05))

(defun ars/swap-ts-mode ()
  (interactive)
  (if
      (string-search "-ts-mode" (symbol-name major-mode))
      (funcall (intern (string-replace "-ts-mode" "-mode" (symbol-name major-mode))))
    (funcall (intern (string-replace "-mode" "-ts-mode" (symbol-name major-mode))))))

;; Programming-language specific things start here
(setq treesit-extra-load-path '("/usr/local/lib/tree-sitter"))
(use-package treesit-auto
  :init
  (global-treesit-auto-mode))

;; Rust and its associated goodies
(use-package cargo)
(use-package rust-mode)
(use-package rustic)

;; YAML
(use-package yaml-mode)
